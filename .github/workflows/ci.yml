name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  api-tests-mongo:
    name: API tests (Mongo)
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:6
        ports: [ "27017:27017" ]
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install base test toolchain + optional deps
        run: |
          set -e
          python -m pip install -U pip pytest
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f app/backend/requirements.txt ]; then
            pip install -r app/backend/requirements.txt
          else
            echo "No project requirements found (ok for empty repo)."
          fi

      - name: Detect mongo tests
        id: detect_mongo
        run: |
          if [ -d tests ] && (ls tests | grep -E '(^test_api\.py$|mongo)' >/dev/null 2>&1); then
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Mongo API tests
        if: steps.detect_mongo.outputs.has_tests == 'true'
        run: |
          mkdir -p tests_output
          pytest -q tests/test_api.py -s --basetemp=tests_output || \
          pytest -q tests/test_*mongo*.py -s --basetemp=tests_output

      - name: Produce placeholder when no tests
        if: steps.detect_mongo.outputs.has_tests != 'true'
        run: |
          mkdir -p tests_output
          echo "No Mongo tests found; skipping." > tests_output/NO_MONGO_TESTS.txt

      - uses: actions/upload-artifact@v4
        with:
          name: mongo-artifacts
          path: tests_output
          if-no-files-found: ignore

  api-tests-pgch:
    name: API tests (Postgres + ClickHouse + MinIO)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: pbi_db
          POSTGRES_USER: pbi_user
          POSTGRES_PASSWORD: pbi_pass
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U pbi_user -d pbi_db"
          --health-interval=10s --health-timeout=5s --health-retries=5

      clickhouse:
        image: clickhouse/clickhouse-server:24.3
        ports: [ "9000:9000", "8123:8123" ]

      # Use Bitnami image which starts MinIO server by default (no 'command:' needed)
      minio:
        image: bitnami/minio:latest
        env:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: minio123
        ports: [ "9000:9000", "9001:9001" ]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install base test toolchain + optional deps
        run: |
          set -e
          python -m pip install -U pip pytest
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f app/backend/requirements.txt ]; then
            pip install -r app/backend/requirements.txt
          else
            echo "No project requirements found (ok for empty repo)."
          fi

      - name: Detect pgch tests
        id: detect_pgch
        run: |
          if [ -d tests ] && (ls tests | grep -E '^test_api_pgch.*\.py$' >/dev/null 2>&1); then
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare output dir
        run: mkdir -p tests_output

      - name: Run PG/CH/MinIO tests
        if: steps.detect_pgch.outputs.has_tests == 'true'
        env:
          STORAGE_MODE: pgch
          PG_DSN: postgresql+asyncpg://pbi_user:pbi_pass@postgres:5432/pbi_db
          CH_URL: http://clickhouse:8123
          CH_USER: default
          CH_PASS: ""
          MINIO_ENDPOINT: http://minio:9000
          MINIO_ACCESS_KEY: minio
          MINIO_SECRET_KEY: minio123
          MINIO_BUCKET: aerh-pbi
        run: |
          pytest -q tests/test_api_pgch*.py -s --basetemp=tests_output

      - name: Produce placeholder when no tests
        if: steps.detect_pgch.outputs.has_tests != 'true'
        run: |
          echo "No PGCH tests found; skipping." > tests_output/NO_PGCH_TESTS.txt

      - uses: actions/upload-artifact@v4
        with:
          name: pgch-artifacts
          path: tests_output
          if-no-files-found: ignore

  e2e-theme:
    name: E2E Theme (optional)
    runs-on: ubuntu-latest
    env:
      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
    steps:
      - name: Skip if FRONTEND_URL not set
        if: env.FRONTEND_URL == ''
        run: echo "FRONTEND_URL not set; skipping E2E theme job."
      - uses: actions/checkout@v4
        if: env.FRONTEND_URL != ''
      - uses: actions/setup-node@v4
        if: env.FRONTEND_URL != ''
        with:
          node-version: "18"
          cache: npm
      - name: Install Playwright deps (if package.json exists)
        if: env.FRONTEND_URL != ''
        run: |
          if [ -f package-lock.json ] || [ -f package.json ]; then
            npm ci || npm i
            npx playwright install --with-deps
          else
            echo "No package.json, skipping"
          fi
      - name: Run theme E2E (if test file exists)
        if: env.FRONTEND_URL != ''
        run: |
          mkdir -p tests_output
          if [ -f tests/e2e/theme.spec.js ]; then
            npx playwright test tests/e2e/theme.spec.js
          else
            echo "No theme.spec.js" > tests_output/NO_E2E_THEME.txt
          fi
      - uses: actions/upload-artifact@v4
        if: env.FRONTEND_URL != ''
        with:
          name: e2e-theme-artifacts
          path: tests_output
          if-no-files-found: ignore
